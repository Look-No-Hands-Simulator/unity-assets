//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.AdsDv
{
    [Serializable]
    public class VCU2AIStatusMsg : Message
    {
        public const string k_RosMessageName = "ads_dv_msgs/VCU2AIStatus";
        public override string RosMessageName => k_RosMessageName;

        //  Handshake
        public bool handshake;
        //  Shutdown request to AI
        public bool shutdown_request;
        //  Autonomous System switch status
        public bool as_switch_status;
        //  Tractive System switch status
        public bool ts_switch_status;
        //  Autonomous System "Go" signal
        public bool go_signal;
        //  State of the steering system [0 - 3]
        public byte steering_status;
        public const byte STEERING_STATUS_OFF = 0;
        public const byte STEERING_STATUS_ACTIVE = 1;
        //  State of the Autonomous System [0 - 7]
        public byte as_state;
        public const byte AS_STATE_AS_OFF = 1;
        public const byte AS_STATE_AS_READY = 2;
        public const byte AS_STATE_AS_DRIVING = 3;
        public const byte AS_STATE_EMERGENCY_BRAKE = 4;
        public const byte AS_STATE_AS_FINISHED = 5;
        //  State of the Mission Indicator [0 - 7]
        public byte ami_state;
        public const byte AMI_STATE_NOT_SELECTED = 0;
        public const byte AMI_STATE_ACCELERATION = 1;
        public const byte AMI_STATE_SKIDPAD = 2;
        public const byte AMI_STATE_AUTOCROSS = 3;
        public const byte AMI_STATE_TRACK_DRIVE = 4;
        public const byte AMI_STATE_BRAKE_TEST = 5;
        public const byte AMI_STATE_INSPECTION = 6;
        //  System fault status
        public bool fault_status;
        //  System warning status
        public bool warning_status;
        //  High traction battery temperature warning
        public bool warn_batt_temp_high;
        //  Low traction battery SOC warning
        public bool warn_batt_soc_low;
        //  AI system E-stop request
        public bool ai_estop_request;
        //  HVIL open-circuit fault
        public bool hvil_open_fault;
        //  HVIL short-circuit fault
        public bool hvil_short_fault;
        //  EBS fault
        public bool ebs_fault;
        //  Offboard charger fault
        public bool offboard_charger_fault;
        //  AI CAN communications fault
        public bool ai_comms_lost;
        //  Braking in Autonomous Driving mode fault
        public bool autonomous_braking_fault;
        //  Autonomous mission status fault
        public bool mission_status_fault;
        public bool reserved_1;
        public bool reserved_2;

        public VCU2AIStatusMsg()
        {
            this.handshake = false;
            this.shutdown_request = false;
            this.as_switch_status = false;
            this.ts_switch_status = false;
            this.go_signal = false;
            this.steering_status = 0;
            this.as_state = 0;
            this.ami_state = 0;
            this.fault_status = false;
            this.warning_status = false;
            this.warn_batt_temp_high = false;
            this.warn_batt_soc_low = false;
            this.ai_estop_request = false;
            this.hvil_open_fault = false;
            this.hvil_short_fault = false;
            this.ebs_fault = false;
            this.offboard_charger_fault = false;
            this.ai_comms_lost = false;
            this.autonomous_braking_fault = false;
            this.mission_status_fault = false;
            this.reserved_1 = false;
            this.reserved_2 = false;
        }

        public VCU2AIStatusMsg(bool handshake, bool shutdown_request, bool as_switch_status, bool ts_switch_status, bool go_signal, byte steering_status, byte as_state, byte ami_state, bool fault_status, bool warning_status, bool warn_batt_temp_high, bool warn_batt_soc_low, bool ai_estop_request, bool hvil_open_fault, bool hvil_short_fault, bool ebs_fault, bool offboard_charger_fault, bool ai_comms_lost, bool autonomous_braking_fault, bool mission_status_fault, bool reserved_1, bool reserved_2)
        {
            this.handshake = handshake;
            this.shutdown_request = shutdown_request;
            this.as_switch_status = as_switch_status;
            this.ts_switch_status = ts_switch_status;
            this.go_signal = go_signal;
            this.steering_status = steering_status;
            this.as_state = as_state;
            this.ami_state = ami_state;
            this.fault_status = fault_status;
            this.warning_status = warning_status;
            this.warn_batt_temp_high = warn_batt_temp_high;
            this.warn_batt_soc_low = warn_batt_soc_low;
            this.ai_estop_request = ai_estop_request;
            this.hvil_open_fault = hvil_open_fault;
            this.hvil_short_fault = hvil_short_fault;
            this.ebs_fault = ebs_fault;
            this.offboard_charger_fault = offboard_charger_fault;
            this.ai_comms_lost = ai_comms_lost;
            this.autonomous_braking_fault = autonomous_braking_fault;
            this.mission_status_fault = mission_status_fault;
            this.reserved_1 = reserved_1;
            this.reserved_2 = reserved_2;
        }

        public static VCU2AIStatusMsg Deserialize(MessageDeserializer deserializer) => new VCU2AIStatusMsg(deserializer);

        private VCU2AIStatusMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.handshake);
            deserializer.Read(out this.shutdown_request);
            deserializer.Read(out this.as_switch_status);
            deserializer.Read(out this.ts_switch_status);
            deserializer.Read(out this.go_signal);
            deserializer.Read(out this.steering_status);
            deserializer.Read(out this.as_state);
            deserializer.Read(out this.ami_state);
            deserializer.Read(out this.fault_status);
            deserializer.Read(out this.warning_status);
            deserializer.Read(out this.warn_batt_temp_high);
            deserializer.Read(out this.warn_batt_soc_low);
            deserializer.Read(out this.ai_estop_request);
            deserializer.Read(out this.hvil_open_fault);
            deserializer.Read(out this.hvil_short_fault);
            deserializer.Read(out this.ebs_fault);
            deserializer.Read(out this.offboard_charger_fault);
            deserializer.Read(out this.ai_comms_lost);
            deserializer.Read(out this.autonomous_braking_fault);
            deserializer.Read(out this.mission_status_fault);
            deserializer.Read(out this.reserved_1);
            deserializer.Read(out this.reserved_2);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.handshake);
            serializer.Write(this.shutdown_request);
            serializer.Write(this.as_switch_status);
            serializer.Write(this.ts_switch_status);
            serializer.Write(this.go_signal);
            serializer.Write(this.steering_status);
            serializer.Write(this.as_state);
            serializer.Write(this.ami_state);
            serializer.Write(this.fault_status);
            serializer.Write(this.warning_status);
            serializer.Write(this.warn_batt_temp_high);
            serializer.Write(this.warn_batt_soc_low);
            serializer.Write(this.ai_estop_request);
            serializer.Write(this.hvil_open_fault);
            serializer.Write(this.hvil_short_fault);
            serializer.Write(this.ebs_fault);
            serializer.Write(this.offboard_charger_fault);
            serializer.Write(this.ai_comms_lost);
            serializer.Write(this.autonomous_braking_fault);
            serializer.Write(this.mission_status_fault);
            serializer.Write(this.reserved_1);
            serializer.Write(this.reserved_2);
        }

        public override string ToString()
        {
            return "VCU2AIStatusMsg: " +
            "\nhandshake: " + handshake.ToString() +
            "\nshutdown_request: " + shutdown_request.ToString() +
            "\nas_switch_status: " + as_switch_status.ToString() +
            "\nts_switch_status: " + ts_switch_status.ToString() +
            "\ngo_signal: " + go_signal.ToString() +
            "\nsteering_status: " + steering_status.ToString() +
            "\nas_state: " + as_state.ToString() +
            "\nami_state: " + ami_state.ToString() +
            "\nfault_status: " + fault_status.ToString() +
            "\nwarning_status: " + warning_status.ToString() +
            "\nwarn_batt_temp_high: " + warn_batt_temp_high.ToString() +
            "\nwarn_batt_soc_low: " + warn_batt_soc_low.ToString() +
            "\nai_estop_request: " + ai_estop_request.ToString() +
            "\nhvil_open_fault: " + hvil_open_fault.ToString() +
            "\nhvil_short_fault: " + hvil_short_fault.ToString() +
            "\nebs_fault: " + ebs_fault.ToString() +
            "\noffboard_charger_fault: " + offboard_charger_fault.ToString() +
            "\nai_comms_lost: " + ai_comms_lost.ToString() +
            "\nautonomous_braking_fault: " + autonomous_braking_fault.ToString() +
            "\nmission_status_fault: " + mission_status_fault.ToString() +
            "\nreserved_1: " + reserved_1.ToString() +
            "\nreserved_2: " + reserved_2.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
