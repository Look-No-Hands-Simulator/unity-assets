//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.AdsDv
{
    [Serializable]
    public class VCU2AIDiagnosticsMsg : Message
    {
        public const string k_RosMessageName = "ads_dv_msgs/VCU2AIDiagnostics";
        public override string RosMessageName => k_RosMessageName;

        //  Battery state of charge [0 - 100] %
        public byte battery_soc_pc;
        //  Maximum battery cell temperature [-30 - 225] degC
        public byte battery_max_cell_temp_deg_c;
        //  Battery cell over-temperature fault
        public bool fault_cell_over_temp;
        //  Battery cell over-voltage fault
        public bool fault_cell_over_volt;
        //  Battery cell under-voltage fault
        public bool fault_cell_under_volt;
        //  Charge aux contactor open circuit fault
        public bool fault_chg_aux_open;
        //  Charge aux contactor short circuit fault
        public bool fault_chg_aux_short;
        //  Fuse activation fault
        public bool fault_fuse_activation;
        //  Front drive motor contactor fault
        public bool fault_hvpos1_open;
        //  Rear drive motor contactor fault
        public bool fault_hvpos2_open;
        //  Pre-charge contactor fault
        public bool fault_prechg_open;
        //  Battery voltage measurement disagreement fault
        public bool fault_voltage_disagree;
        //  Battery pack over-current fault
        public bool fault_pack_over_current;
        //  BMS measurement fault
        public bool fault_measurement;
        //  Low battery SOC fault
        public bool fault_low_soc;
        //  System action [0 - 15]
        public byte sys_action;
        public const byte SYS_ACTION_INITIALISE = 0;
        public const byte SYS_ACTION_CHARGE = 1;
        public const byte SYS_ACTION_DRIVE_AUTO = 2;
        public const byte SYS_ACTION_DRIVE_MAN = 3;
        public const byte SYS_ACTION_SHUTDOWN = 4;
        //  Contactor state machine state [0 - 15]
        public byte sm_contactor;
        public const byte SM_CONTACTOR_SHUTDOWN = 0;
        public const byte SM_CONTACTOR_PRECHG_CHECK = 1;
        public const byte SM_CONTACTOR_CHG_AUX = 2;
        public const byte SM_CONTACTOR_DRIVE = 3;
        public const byte SM_CONTACTOR_FAULT = 4;
        //  Main state machine state [0 - 15]
        public byte sm_main;
        public const byte SM_MAIN_SHUTDOWN_OFF = 0;
        public const byte SM_MAIN_INITIAL_ACTIONS = 1;
        public const byte SM_MAIN_POWER_ON_SELF_TEST = 2;
        public const byte SM_MAIN_POWERTRAIN_ENABLE = 3;
        public const byte SM_MAIN_DRIVE_AUTONOMOUS = 4;
        public const byte SM_MAIN_DRIVE_MANUAL = 5;
        public const byte SM_MAIN_SHUTDOWN_ACTIONS = 6;
        public const byte SM_MAIN_CHARGE = 7;
        public const byte SM_MAIN_AUX = 8;
        //  Drive motor controller state machine state [0 - 15]
        public byte sm_mc_drv;
        public const byte SM_MC_DRV_IDLE = 1;
        public const byte SM_MC_DRV_DRIVE_STOP_SHUTDOWN = 2;
        public const byte SM_MC_DRV_DRIVE_START_SHUTDOWN = 3;
        public const byte SM_MC_DRV_DRIVE_START_SWITCH_ON = 4;
        public const byte SM_MC_DRV_DRIVE_START_ENABLE_OP = 5;
        public const byte SM_MC_DRV_RUNNING = 6;
        public const byte SM_MC_DRV_END_START_SHUTDOWN = 7;
        public const byte SM_MC_DRV_END_STOP_SHUTDOWN = 8;
        public const byte SM_MC_DRV_ERROR = 9;
        //  Autonomous driving state machine state [0 - 15]
        public byte sm_drv_auto;
        public const byte SM_DRV_AUTO_AS_OFF = 1;
        public const byte SM_DRV_AUTO_AS_READY = 2;
        public const byte SM_DRV_AUTO_AS_DRIVING = 3;
        public const byte SM_DRV_AUTO_EMERGENCY_BRAKE = 4;
        public const byte SM_DRV_AUTO_AS_FINISHED = 5;
        //  Emergency braking system state machine state [0 - 15]
        public byte sm_ebs;
        public const byte SM_EBS_IDLE = 0;
        public const byte SM_EBS_CHARGE = 1;
        public const byte SM_EBS_HOLD = 2;
        public const byte SM_EBS_RECHARGE = 3;
        public const byte SM_EBS_FAULT = 4;

        public VCU2AIDiagnosticsMsg()
        {
            this.battery_soc_pc = 0;
            this.battery_max_cell_temp_deg_c = 0;
            this.fault_cell_over_temp = false;
            this.fault_cell_over_volt = false;
            this.fault_cell_under_volt = false;
            this.fault_chg_aux_open = false;
            this.fault_chg_aux_short = false;
            this.fault_fuse_activation = false;
            this.fault_hvpos1_open = false;
            this.fault_hvpos2_open = false;
            this.fault_prechg_open = false;
            this.fault_voltage_disagree = false;
            this.fault_pack_over_current = false;
            this.fault_measurement = false;
            this.fault_low_soc = false;
            this.sys_action = 0;
            this.sm_contactor = 0;
            this.sm_main = 0;
            this.sm_mc_drv = 0;
            this.sm_drv_auto = 0;
            this.sm_ebs = 0;
        }

        public VCU2AIDiagnosticsMsg(byte battery_soc_pc, byte battery_max_cell_temp_deg_c, bool fault_cell_over_temp, bool fault_cell_over_volt, bool fault_cell_under_volt, bool fault_chg_aux_open, bool fault_chg_aux_short, bool fault_fuse_activation, bool fault_hvpos1_open, bool fault_hvpos2_open, bool fault_prechg_open, bool fault_voltage_disagree, bool fault_pack_over_current, bool fault_measurement, bool fault_low_soc, byte sys_action, byte sm_contactor, byte sm_main, byte sm_mc_drv, byte sm_drv_auto, byte sm_ebs)
        {
            this.battery_soc_pc = battery_soc_pc;
            this.battery_max_cell_temp_deg_c = battery_max_cell_temp_deg_c;
            this.fault_cell_over_temp = fault_cell_over_temp;
            this.fault_cell_over_volt = fault_cell_over_volt;
            this.fault_cell_under_volt = fault_cell_under_volt;
            this.fault_chg_aux_open = fault_chg_aux_open;
            this.fault_chg_aux_short = fault_chg_aux_short;
            this.fault_fuse_activation = fault_fuse_activation;
            this.fault_hvpos1_open = fault_hvpos1_open;
            this.fault_hvpos2_open = fault_hvpos2_open;
            this.fault_prechg_open = fault_prechg_open;
            this.fault_voltage_disagree = fault_voltage_disagree;
            this.fault_pack_over_current = fault_pack_over_current;
            this.fault_measurement = fault_measurement;
            this.fault_low_soc = fault_low_soc;
            this.sys_action = sys_action;
            this.sm_contactor = sm_contactor;
            this.sm_main = sm_main;
            this.sm_mc_drv = sm_mc_drv;
            this.sm_drv_auto = sm_drv_auto;
            this.sm_ebs = sm_ebs;
        }

        public static VCU2AIDiagnosticsMsg Deserialize(MessageDeserializer deserializer) => new VCU2AIDiagnosticsMsg(deserializer);

        private VCU2AIDiagnosticsMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.battery_soc_pc);
            deserializer.Read(out this.battery_max_cell_temp_deg_c);
            deserializer.Read(out this.fault_cell_over_temp);
            deserializer.Read(out this.fault_cell_over_volt);
            deserializer.Read(out this.fault_cell_under_volt);
            deserializer.Read(out this.fault_chg_aux_open);
            deserializer.Read(out this.fault_chg_aux_short);
            deserializer.Read(out this.fault_fuse_activation);
            deserializer.Read(out this.fault_hvpos1_open);
            deserializer.Read(out this.fault_hvpos2_open);
            deserializer.Read(out this.fault_prechg_open);
            deserializer.Read(out this.fault_voltage_disagree);
            deserializer.Read(out this.fault_pack_over_current);
            deserializer.Read(out this.fault_measurement);
            deserializer.Read(out this.fault_low_soc);
            deserializer.Read(out this.sys_action);
            deserializer.Read(out this.sm_contactor);
            deserializer.Read(out this.sm_main);
            deserializer.Read(out this.sm_mc_drv);
            deserializer.Read(out this.sm_drv_auto);
            deserializer.Read(out this.sm_ebs);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.battery_soc_pc);
            serializer.Write(this.battery_max_cell_temp_deg_c);
            serializer.Write(this.fault_cell_over_temp);
            serializer.Write(this.fault_cell_over_volt);
            serializer.Write(this.fault_cell_under_volt);
            serializer.Write(this.fault_chg_aux_open);
            serializer.Write(this.fault_chg_aux_short);
            serializer.Write(this.fault_fuse_activation);
            serializer.Write(this.fault_hvpos1_open);
            serializer.Write(this.fault_hvpos2_open);
            serializer.Write(this.fault_prechg_open);
            serializer.Write(this.fault_voltage_disagree);
            serializer.Write(this.fault_pack_over_current);
            serializer.Write(this.fault_measurement);
            serializer.Write(this.fault_low_soc);
            serializer.Write(this.sys_action);
            serializer.Write(this.sm_contactor);
            serializer.Write(this.sm_main);
            serializer.Write(this.sm_mc_drv);
            serializer.Write(this.sm_drv_auto);
            serializer.Write(this.sm_ebs);
        }

        public override string ToString()
        {
            return "VCU2AIDiagnosticsMsg: " +
            "\nbattery_soc_pc: " + battery_soc_pc.ToString() +
            "\nbattery_max_cell_temp_deg_c: " + battery_max_cell_temp_deg_c.ToString() +
            "\nfault_cell_over_temp: " + fault_cell_over_temp.ToString() +
            "\nfault_cell_over_volt: " + fault_cell_over_volt.ToString() +
            "\nfault_cell_under_volt: " + fault_cell_under_volt.ToString() +
            "\nfault_chg_aux_open: " + fault_chg_aux_open.ToString() +
            "\nfault_chg_aux_short: " + fault_chg_aux_short.ToString() +
            "\nfault_fuse_activation: " + fault_fuse_activation.ToString() +
            "\nfault_hvpos1_open: " + fault_hvpos1_open.ToString() +
            "\nfault_hvpos2_open: " + fault_hvpos2_open.ToString() +
            "\nfault_prechg_open: " + fault_prechg_open.ToString() +
            "\nfault_voltage_disagree: " + fault_voltage_disagree.ToString() +
            "\nfault_pack_over_current: " + fault_pack_over_current.ToString() +
            "\nfault_measurement: " + fault_measurement.ToString() +
            "\nfault_low_soc: " + fault_low_soc.ToString() +
            "\nsys_action: " + sys_action.ToString() +
            "\nsm_contactor: " + sm_contactor.ToString() +
            "\nsm_main: " + sm_main.ToString() +
            "\nsm_mc_drv: " + sm_mc_drv.ToString() +
            "\nsm_drv_auto: " + sm_drv_auto.ToString() +
            "\nsm_ebs: " + sm_ebs.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
